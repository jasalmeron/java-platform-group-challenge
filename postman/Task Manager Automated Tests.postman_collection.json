{
	"info": {
		"_postman_id": "5cf4b426-1d32-49db-8e92-3f06dbbcde80",
		"name": "Task Manager Automated Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15341421"
	},
	"item": [
		{
			"name": "CRUD Test",
			"item": [
				{
					"name": "Create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Create task] Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(`[Create task] Created task with id`, () => {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.have.jsonBody('id');",
									"    const taskId = jsonData.id;        ",
									"    console.log(\"task id created: \" + taskId);",
									"    pm.environment.set(\"created_task_id\", taskId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"task\":  \"{{task_name}}\", \"date\": \"{{date}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task or create if not exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Update task] Status code is 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"task\":  \"{{updated_task_name}}\", \"date\": \"{{updated_date}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{created_task_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{created_task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Get task] Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(`[${request.name}] Get task with expected data`, () => {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.have.jsonBody('id');",
									"    pm.expect(jsonData.task).to.equal(pm.iterationData.get('updated_task_name'));",
									"    pm.expect(jsonData.date).to.equal(pm.iterationData.get('updated_date'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"task\":  \"Start Java Platform Group challenge\", \"date\": \"2023-07-15T00:00:00Z\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{created_task_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{created_task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Delete task] Status code is 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"task\":  \"Start Java Platform Group challenge\", \"date\": \"2023-07-15T00:00:00Z\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{created_task_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{created_task_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All tasks Test",
			"item": [
				{
					"name": "Create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Create task] Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(`[Create task] Created task with id`, () => {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.have.jsonBody('id');",
									"    const taskId = jsonData.id;        ",
									"    console.log(\"task id created:\" + taskId);",
									"    pm.environment.set(\"created_task_id\", taskId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"task\":  \"{{task_name}}\", \"date\": \"{{date}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Get all tasks] Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(`[Get all tasks] Retrieve expected data`, () => {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(jsonData.length).to.eq(pm.iterationData.get(\"total_retrieved_tasks\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}